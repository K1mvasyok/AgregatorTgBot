from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import datetime

import keyboards as kb

router_u = Router()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@router_u.message(CommandStart())
async def Cmd_start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç Travel Tracker\n\n'
                             f'–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?: \n\n'
                             f'‚Ä¢ –ú—ã –º–æ–∂–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ —Ç–æ—á–∫–∏ –ê –≤ —Ç–æ—á–∫—É –ë\n\n'  
                             f'‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–±—É—Å–Ω—ã—Ö, –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –∏ –∞—ç—Ä–æ-–º–∞—Ä—à—Ä—É—Ç–∞—Ö –≤ –†–æ—Å—Å–∏–∏')
    await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())

# –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
@router_u.callback_query(F.data.startswith("return_to_menu"))
async def Return_to_menu(query: CallbackQuery):
    await query.message.answer('üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu())

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç - –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ 
@router_u.message(F.text == '‚úàÔ∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ú–∞—Ä—à—Ä—É—Ç')
async def –°ity_origin_botton(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=await kb.city_origin())

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª—ë—Ç–∞  
@router_u.callback_query(F.data.startswith("city.origin_"))
async def City_destination_botton(query: CallbackQuery):
    city_origin = query.data.split("_")[1]
    await query.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ ?–ø—Ä–∏–ª–µ—Ç–∞?:', reply_markup=await kb.city_destination(city_origin))

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –≥–æ–¥ –≤—ã–ª–µ—Ç–∞ 
@router_u.callback_query(F.data.startswith("city.destination_"))
async def Time_year_botton(query: CallbackQuery):
    city_destination_origin = query.data.split("_")[1]
    await query.message.answer(f'–ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å –≤ —ç—Ç–æ–º –≥–æ–¥—É?', reply_markup=await kb.time_year(city_destination_origin))
    
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –º–µ—Å—è—Ü –≤—ã–ª–µ—Ç–∞   
@router_u.callback_query(F.data.startswith("time.year_"))
async def Time_month_botton(query: CallbackQuery):
    year_city_destination_origin = query.data.split("_")[1]
    await query.message.answer(f'–ú–µ—Å—è—Ü –≤—ã–ª–µ—Ç–∞:', reply_markup=await kb.time_month(year_city_destination_origin))
    
# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –¥–µ–Ω—å 
@router_u.callback_query(F.data.startswith("time.month_"))
async def Time_day_botton(query: CallbackQuery):
    month_year_city_destination_origin = query.data.split("_")[1]
    month = int(query.data.split("_")[1].split(".")[0])
    year = int(query.data.split(".")[2])
    await query.message.answer(f'–î–µ–Ω—å –≤—ã–ª–µ—Ç–∞:', reply_markup=await kb.time_day(month_year_city_destination_origin, month, year))
    
@router_u.callback_query(F.data.startswith("time.day_"))
async def Time_month_destination(query: CallbackQuery):
    day_month_year_city_destination_origin = query.data.split("_")[1]
    print(day_month_year_city_destination_origin)
    day = int(day_month_year_city_destination_origin.split(".")[0])
    month = int(day_month_year_city_destination_origin.split(".")[1])
    
    now = datetime.datetime.now()
    year_offset = int(day_month_year_city_destination_origin.split(".")[2])
    year = now.year + year_offset
    
    city_origin = day_month_year_city_destination_origin.split(".")[-1]
    city_destination= day_month_year_city_destination_origin.split(".")[3]
    
    await query.message.answer(f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n'
                               f'–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: {day}.{month}.{year}\n'
                               f'–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞: {city_origin}\n'
                               f'–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞: {city_destination}', 
                               reply_markup=await kb.airlines_start())